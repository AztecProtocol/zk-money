#!/bin/bash
set -e

readonly IMAGE=$1
readonly REPOSITORY=${IMAGE%:*}
readonly TAG=${IMAGE#*:}
readonly IMAGE_COMMIT_URI=$ECR_URL/$REPOSITORY:cache-$CIRCLE_SHA1-$TAG

# Pull the built image, do nothing if this wasn't rebuilt.
docker pull $IMAGE_COMMIT_URI > /dev/null 2>&1 || { echo "No new image found." && exit 0; }

# Copy docker container to local file system.
readonly TEMP_CONTAINER=$(docker create $IMAGE_COMMIT_URI)
docker cp $TEMP_CONTAINER:/usr/src/$REPOSITORY/dist $REPOSITORY
docker rm -v $TEMP_CONTAINER

cd $REPOSITORY

# Publish npm package using given version number if higher than published, otherwise bump published.
echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > .npmrc

readonly LOCAL_VERSION=$(jq -r .version < package.json)
readonly PUBLISHED_VERSION=$(npm show ./ version 2> /dev/null)
readonly HIGHER_VERSION=$(npx semver ${LOCAL_VERSION} ${PUBLISHED_VERSION} | tail -1)

if [ "$(npx semver $LOCAL_VERSION)" == "" ]; then
  echo "$LOCAL_VERSION is not a semantic version."
  exit 1
fi

if [ "$LOCAL_VERSION" == "$PUBLISHED_VERSION" ] || [ "$LOCAL_VERSION" != "$HIGHER_VERSION" ]; then
  readonly NEW_VERSION=$(npx semver -i patch $PUBLISHED_VERSION)
  echo "$LOCAL_VERSION is <= published version $PUBLISHED_VERSION, bumping to $NEW_VERSION."
  tmp=$(mktemp)
  jq --arg v $NEW_VERSION '.version = $v' package.json > $tmp && mv $tmp package.json
fi

npm publish