#!/bin/bash
set -e

IMAGE=$1
REPOSITORY=${IMAGE%:*}
TAG=${IMAGE#*:}
BRANCH=${CIRCLE_BRANCH/\//_}
IMAGE_MASTER_URI=$ECR_URL/$REPOSITORY:cache-master-$TAG
IMAGE_BRANCH_URI=$ECR_URL/$REPOSITORY:cache-$BRANCH-$TAG
IMAGE_COMMIT_URI=$ECR_URL/$REPOSITORY:cache-$CIRCLE_SHA1-$TAG
DOCKERFILE=${2:-./Dockerfile}

# Check if we should rebuild.
check_rebuild || { echo "No rebuild necessary." && exit 0 }

# Ensure ECR repository exists.
ensure_repo $REPOSITORY $ECR_REGION

# Pull latest parents that are not ours.
PARENTS=$(cat $DOCKERFILE | sed -n -e 's/FROM \([^[:space:]]\+\).*/\1/p' | grep -v $ECR_URL | sort | uniq)
for PARENT in $PARENTS; do
  echo "Pulling parent: $PARENT"
  docker pull $PARENT > /dev/null 2>&1
done

# For each parent that's ours, pull in the newly rebuilt image if it's present.
PARENTS=$(cat $DOCKERFILE | sed -n -e "s/FROM $ECR_URL\/\([^[:space:]]\+\)/\1/p")
for PARENT in $PARENTS; do
  [[ "$PARENT" =~ ":" ]] || PARENT="$PARENT:latest"
  echo "Pulling parent: $PARENT"
  PARENT_REPO=${PARENT%:*}
  PARENT_TAG=${PARENT#*:}
  PARENT_IMAGE_URI=$ECR_URL/$PARENT_REPO:cache-$CIRCLE_SHA1-$PARENT_TAG
  if docker pull $PARENT_IMAGE_URI > /dev/null 2>&1; then
    docker tag $PARENT_IMAGE_URI $ECR_URL/$PARENT
  else
    docker pull $ECR_URL/$PARENT > /dev/null 2>&1
  fi
done

function fetch_cache() {
  if ! docker pull $1 > /dev/null 2>&1; then
    echo "Nothing at: $1"
    return 1
  fi
  return 0
}

# Pull image from cache.
echo "Pulling previous build: $IMAGE"
fetch_cache $IMAGE_BRANCH_URI || fetch_cache $IMAGE_MASTER_URI || true
CACHE_FROM="--cache-from $IMAGE_BRANCH_URI --cache-from $IMAGE_MASTER_URI"
echo

# Pull, build and push each named stage to cache.
STAGES=$(cat $DOCKERFILE | sed -n -e 's/FROM .* AS \(.*\)/\1/p')
for STAGE in $STAGES; do
  echo "Pulling stage: $STAGE"
  STAGE_IMAGE_MASTER_URI=$ECR_URL/$REPOSITORY:cache-master-$TAG-$STAGE
  STAGE_IMAGE_BRANCH_URI=$ECR_URL/$REPOSITORY:cache-$BRANCH-$TAG-$STAGE

  fetch_cache $STAGE_IMAGE_BRANCH_URI || fetch_cache $STAGE_IMAGE_MASTER_URI || true
  STAGE_CACHE_FROM="--cache-from $STAGE_IMAGE_BRANCH_URI --cache-from $STAGE_IMAGE_MASTER_URI"
  CACHE_FROM="$CACHE_FROM $STAGE_CACHE_FROM"

  echo "Building stage: $STAGE"
  docker build --target $STAGE $STAGE_CACHE_FROM -t $STAGE_IMAGE_BRANCH_URI -f $DOCKERFILE .

  echo "Pushing stage: $STAGE"
  docker push $STAGE_IMAGE_BRANCH_URI > /dev/null 2>&1
  echo
done

echo "Building image: $IMAGE"
docker build -t $IMAGE_BRANCH_URI -t $IMAGE_COMMIT_URI -f $DOCKERFILE $CACHE_FROM .
echo "Pushing image: $IMAGE"
docker push $IMAGE_BRANCH_URI > /dev/null 2>&1
docker push $IMAGE_COMMIT_URI > /dev/null 2>&1
echo

if [ -d ./terraform ]; then
  ensure_terraform
  export TF_IN_AUTOMATION=1
  cd terraform
  terraform init -input=false
  terraform validate
fi