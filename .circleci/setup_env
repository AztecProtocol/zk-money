#!/bin/bash
# This script sets up the global build environment. This should be called before any other build scripts,
# as the other build scripts assume these global variables are set. The global variables are written to
# the file in $BASH_ENV, which means that any new bash shells launched within the lifetime of the machine
# context will have these variables set. This happens for example when CircleCI runs a new "step".
# The script should be sourced, e.g:
#   source setup_env
# This ensures the resultant variables are set in the calling shell.
set -e

COMMIT_HASH=$1
COMMIT_BRANCH=$2
COMMIT_TAG=$3
JOB_NAME=$4
GIT_REPOSITORY_URL=$5

BUILD_SYSTEM_PATH=$(pwd)
PROJECT=$(cat ../PROJECT)
VERSION=$(cat ../VERSION)

if [ -n "$COMMIT_TAG" ]; then
  # We're tagged e.g. v2.1.123 or v2.1.123-testnet.0.
  # First we sanity check that the tag matches the VERSION file.
  COMMIT_TAG_VERSION=$(echo "$COMMIT_TAG" | grep -oP "v\d+.\d+")
  if [ "$COMMIT_TAG_VERSION" != "$VERSION" ]; then
    echo "Commit tag $COMMIT_TAG does not match repo version $VERSION."
    exit 1
  fi

  # Extract the version tag from the commit tag, if it has one, e.g. testnet.
  # If we have one, we look something like v2.1.123-testnet.0. This is a "non production" release.
  VERSION_TAG=$(echo "$COMMIT_TAG" | grep -oP ".*-\K(.*)(?=\.\d+)")
  if [ -z "$VERSION_TAG" ]; then
    # If we don't have one, we look something like v2.1.123. This is a production release.
    VERSION_TAG=prod
  fi
else
  # We have no commit tag. This is one of our development project branches.
  VERSION_TAG=dev
fi

# The deploy tag (used in api paths, subdomains), is concatenation of the project name and version tag, e.g. aztec-connect-dev.
# The terraform that will be executed (if it exists) is named after the version tag, e.g. ./terraform/dev.
DEPLOY_TAG=$PROJECT-$VERSION_TAG
TF_DIR=./terraform/$VERSION_TAG

echo export BUILD_SYSTEM_PATH=$BUILD_SYSTEM_PATH >> $BASH_ENV
echo export SSH_CONFIG_PATH=$BUILD_SYSTEM_PATH/remote/ssh_config >> $BASH_ENV
echo export PATH=$PATH:$BUILD_SYSTEM_PATH >> $BASH_ENV
echo export AWS_DEFAULT_REGION=eu-west-2 >> $BASH_ENV
echo export ECR_REGION=us-east-2 >> $BASH_ENV
echo export ECR_URL=278380418400.dkr.ecr.us-east-2.amazonaws.com >> $BASH_ENV
echo export ECR_DEPLOY_REGION=eu-west-2 >> $BASH_ENV
echo export ECR_DEPLOY_URL=278380418400.dkr.ecr.eu-west-2.amazonaws.com >> $BASH_ENV
echo export PROJECT=$PROJECT >> $BASH_ENV
echo export COMMIT_HASH=$COMMIT_HASH >> $BASH_ENV
echo export COMMIT_BRANCH=$COMMIT_BRANCH >> $BASH_ENV
echo export COMMIT_TAG=$COMMIT_TAG >> $BASH_ENV
echo export JOB_NAME=$JOB_NAME >> $BASH_ENV
echo export GIT_REPOSITORY_URL=$GIT_REPOSITORY_URL >> $BASH_ENV
echo export VERSION_TAG=$VERSION_TAG >> $BASH_ENV
echo export DEPLOY_TAG=$DEPLOY_TAG >> $BASH_ENV
echo export TF_DIR=$TF_DIR >> $BASH_ENV
cat $BASH_ENV

# Having written the variables to $BASH_ENV, we now want to set them in this shell context.
source $BASH_ENV

# Ensure correct permissions on build instance key.
cp ./remote/build_instance_key ~/.ssh/build_instance_key
chmod 600 ~/.ssh/build_instance_key